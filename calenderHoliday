@ExtendWith(MockitoExtension.class)
class RefExternalServiceAdapterTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private RefExternalServiceAdapter adapter; // your class under test

    private static final String COUNTRY_CODE = "US";
    private static final int YEAR = 2025;

    private String buildUrl(String countryCode, int year) {
        // build full expected URL here if needed for verification
        return "https://some-api/api/v1/calendars/get-holidays?countryCode=" + countryCode + "&year=" + year;
    }

    @Test
    void shouldReturnCalendarSuccessfully() {
        HolidayCalendar mockCalendar = new HolidayCalendar(); // populate mock if needed
        ResponseEntity<HolidayCalendar> response = new ResponseEntity<>(mockCalendar, HttpStatus.OK);

        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(HolidayCalendar.class)))
                .thenReturn(response);

        HolidayCalendar result = adapter.fetchCalendar(COUNTRY_CODE, YEAR);

        assertNotNull(result);
        // add more assertions if needed
    }

    @Test
    void shouldThrowExceptionWhenStatusIsNotOK() {
        ResponseEntity<HolidayCalendar> response = new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);

        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(HolidayCalendar.class)))
                .thenReturn(response);

        RfsCustomException ex = assertThrows(RfsCustomException.class,
                () -> adapter.fetchCalendar(COUNTRY_CODE, YEAR));

        assertTrue(ex.getMessage().contains("Unable to fetch calendar"));
    }

    @Test
    void shouldThrowOnHttpClientError() {
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(HolidayCalendar.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.BAD_REQUEST));

        RfsCustomException ex = assertThrows(RfsCustomException.class,
                () -> adapter.fetchCalendar(COUNTRY_CODE, YEAR));

        assertTrue(ex.getMessage().contains("Client issue"));
    }

    @Test
    void shouldThrowOnHttpServerError() {
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(HolidayCalendar.class)))
                .thenThrow(new HttpServerErrorException(HttpStatus.SERVICE_UNAVAILABLE));

        RfsCustomException ex = assertThrows(RfsCustomException.class,
                () -> adapter.fetchCalendar(COUNTRY_CODE, YEAR));

        assertTrue(ex.getMessage().contains("Server issue"));
    }

    @Test
    void shouldThrowOnRestClientException() {
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(HolidayCalendar.class)))
                .thenThrow(new RestClientException("RestTemplate error"));

        RfsCustomException ex = assertThrows(RfsCustomException.class,
                () -> adapter.fetchCalendar(COUNTRY_CODE, YEAR));

        assertTrue(ex.getMessage().contains("Rest client issue"));
    }

    @Test
    void shouldThrowOnUnexpectedException() {
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(HolidayCalendar.class)))
                .thenThrow(new RuntimeException("Unknown error"));

        RfsCustomException ex = assertThrows(RfsCustomException.class,
                () -> adapter.fetchCalendar(COUNTRY_CODE, YEAR));

        assertTrue(ex.getMessage().contains("Unexpected Exception"));
    }
}


@ExtendWith(MockitoExtension.class)
class RefExternalSvcAdapterTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private RefExternalSvcAdapter adapter;

    private InvoicePIBStatus invoicePIBStatus = new InvoicePIBStatus(); // Set fields if required
    private Pageable pageable = PageRequest.of(0, 10);

    @Test
    void shouldReturnInvoiceListOnSuccess() {
        PageResponse<InvoicePIB> mockPageResponse = new PageResponse<>();
        // Fill mockPageResponse with test data if needed

        ResponseEntity<PageResponse<InvoicePIB>> mockResponse =
                new ResponseEntity<>(mockPageResponse, HttpStatus.OK);

        when(restTemplate.exchange(
                any(URI.class),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(mockResponse);

        PageResponse<InvoicePIB> result = adapter.getInvoicePIBListByPage(invoicePIBStatus, pageable);
        assertNotNull(result);
        // Optionally: assertEquals(mockPageResponse.getItems().size(), result.getItems().size());
    }

    @Test
    void shouldThrowWhenStatusIsNotOK() {
        ResponseEntity<PageResponse<InvoicePIB>> mockResponse =
                new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);

        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(mockResponse);

        RfsCustomExceptions ex = assertThrows(RfsCustomExceptions.class, () ->
                adapter.getInvoicePIBListByPage(invoicePIBStatus, pageable));
        assertTrue(ex.getMessage().contains("UNABLE TO FETCH INVOICE PIB LIST"));
    }

    @Test
    void shouldThrowOnHttpClientError() {
        when(restTemplate.exchange(any(), any(), any(), any(ParameterizedTypeReference.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Bad request"));

        RfsCustomExceptions ex = assertThrows(RfsCustomExceptions.class, () ->
                adapter.getInvoicePIBListByPage(invoicePIBStatus, pageable));
        assertTrue(ex.getMessage().contains("Issue with invoice fetch"));
    }

    @Test
    void shouldThrowOnHttpServerError() {
        when(restTemplate.exchange(any(), any(), any(), any(ParameterizedTypeReference.class)))
                .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        assertThrows(RfsCustomExceptions.class, () ->
                adapter.getInvoicePIBListByPage(invoicePIBStatus, pageable));
    }

    @Test
    void shouldThrowOnRestClientError() {
        when(restTemplate.exchange(any(), any(), any(), any(ParameterizedTypeReference.class)))
                .thenThrow(new RestClientException("Connection refused"));

        assertThrows(RfsCustomExceptions.class, () ->
                adapter.getInvoicePIBListByPage(invoicePIBStatus, pageable));
    }

    @Test
    void shouldThrowOnUnknownError() {
        when(restTemplate.exchange(any(), any(), any(), any(ParameterizedTypeReference.class)))
                .thenThrow(new RuntimeException("Unknown"));

        assertThrows(RfsCustomExceptions.class, () ->
                adapter.getInvoicePIBListByPage(invoicePIBStatus, pageable));
    }
}
