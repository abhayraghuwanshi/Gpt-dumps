pipeline {
    agent {
        docker {
            image 'gcr.io/kaniko-project/executor:latest'
            args '--user root' // Ensure permissions to access workspace
        }
    }
    environment {
        IMAGE_NAME = 'your-registry/your-image-name:latest' // Replace with your image
        DOCKER_CONFIG = '/kaniko/.docker/'                  // Kaniko expects this path
    }
    stages {
        stage('Setup Docker Credentials') {
            steps {
                script {
                    // Write the dockerconfig.json from Jenkins credentials
                    withCredentials([file(credentialsId: 'docker-config', variable: 'DOCKER_CONFIG_FILE')]) {
                        sh '''
                        mkdir -p /kaniko/.docker
                        cp $DOCKER_CONFIG_FILE /kaniko/.docker/config.json
                        '''
                    }
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    sh '''#!/bin/sh
                    /kaniko/executor \
                      --dockerfile=Dockerfile \
                      --context=${WORKSPACE} \
                      --destination=${IMAGE_NAME} \
                      --cache=true
                    '''
                }
            }
        }
    }
    post {
        success {
            echo "Image successfully built and pushed: ${IMAGE_NAME}"
        }
        failure {
            echo "Build failed. Check logs for errors."
        }
    }
}





pipeline {
    agent {
        docker {
            image 'gcr.io/kaniko-project/executor:latest'
            args '--user root' // Allow root-level access in Kaniko
        }
    }
    parameters {
        file(name: 'UPLOAD_FILE', description: 'Upload Dockerfile or build context (e.g., .tar.gz)') // Input file
        string(name: 'IMAGE_NAME', defaultValue: 'your-registry/your-image:latest', description: 'Target Docker image')
    }
    environment {
        DOCKER_CONFIG = '/kaniko/.docker/' // Path Kaniko reads Docker credentials from
    }
    stages {
        stage('Prepare Docker Context') {
            steps {
                script {
                    echo "üìÇ Uploaded File: ${UPLOAD_FILE}"
                    sh '''
                    mkdir -p ${WORKSPACE}/build-context
                    cp ${UPLOAD_FILE} ${WORKSPACE}/build-context/
                    '''
                    
                    // Extract if it's a tarball
                    if (UPLOAD_FILE.endsWith('.tar.gz')) {
                        sh 'tar -xzf ${WORKSPACE}/build-context/${UPLOAD_FILE} -C ${WORKSPACE}/build-context/'
                    }
                }
            }
        }

        stage('Setup Docker Credentials') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'docker-config', variable: 'DOCKER_CONFIG_FILE')]) {
                        sh '''
                        mkdir -p /kaniko/.docker
                        cp $DOCKER_CONFIG_FILE /kaniko/.docker/config.json
                        '''
                    }
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    sh '''
                    /kaniko/executor \
                      --dockerfile=${WORKSPACE}/build-context/Dockerfile \
                      --context=${WORKSPACE}/build-context \
                      --destination=${IMAGE_NAME} \
                      --cache=true
                    '''
                }
            }
        }
    }
    post {
        success {
            echo "‚úÖ Docker image successfully built and pushed: ${IMAGE_NAME}"
        }
        failure {
            echo "‚ùå Build failed. Check logs for details."
        }
    }
}

pipeline {
    agent none // We use a Kubernetes pod dynamically

    environment {
        IMAGE_NAME = 'your-registry/your-image:latest' // Destination image
        DOCKER_CONFIG = '/kaniko/.docker/' // Kaniko expects credentials here
    }

    stages {
        stage('Build and Push Image with Kaniko') {
            agent {
                kubernetes {
                    yaml """
                    apiVersion: v1
                    kind: Pod
                    spec:
                      containers:
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:latest
                        command:
                        - /busybox/cat
                        tty: true
                        volumeMounts:
                        - name: docker-config
                          mountPath: /kaniko/.docker
                      volumes:
                        - name: docker-config
                          emptyDir: {}
                    """
                }
            }

            steps {
                script {
                    echo "üìÇ Preparing Docker credentials"

                    // Use Jenkins credential binding to securely access Docker credentials
                    withCredentials([file(credentialsId: 'docker-config', variable: 'DOCKER_CONFIG_FILE')]) {
                        sh '''
                        # Create Docker config directory if not exists
                        mkdir -p /kaniko/.docker

                        # Copy Jenkins docker config to Kaniko's expected location
                        cp $DOCKER_CONFIG_FILE /kaniko/.docker/config.json
                        '''
                    }

                    echo "üèóÔ∏è  Building Docker image using Kaniko..."

                    sh '''
                    /kaniko/executor \
                      --dockerfile=Dockerfile \         # Dockerfile location
                      --context=${WORKSPACE} \          # Build context (workspace)
                      --destination=${IMAGE_NAME} \     # Image to push
                      --cache=true                      # Enable caching for faster builds
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Docker image successfully built and pushed: ${IMAGE_NAME}"
        }
        failure {
            echo "‚ùå Build failed. Check logs for more details."
        }
    }
}

pipeline {
    agent none // Use dynamic Kubernetes pod

    parameters {
        string(name: 'IMAGE_NAME', defaultValue: 'your-registry/your-image:latest', description: 'Docker image name to push')
        file(name: 'DOCKERFILE_UPLOAD', description: 'Upload Dockerfile to build the image')
        string(name: 'CONTEXT_PATH', defaultValue: '.', description: 'Docker build context (relative to workspace)')
    }

    environment {
        DOCKER_CONFIG = '/kaniko/.docker/' // Kaniko requires Docker credentials here
    }

    stages {
        stage('Build and Push Image with Kaniko') {
            agent {
                kubernetes {
                    yaml """
                    apiVersion: v1
                    kind: Pod
                    spec:
                      containers:
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:latest
                        command:
                        - /busybox/cat
                        tty: true
                        volumeMounts:
                        - name: docker-config
                          mountPath: /kaniko/.docker
                      volumes:
                        - name: docker-config
                          emptyDir: {}
                    """
                }
            }

            steps {
                script {
                    echo "üìÇ Preparing Docker credentials"

                    // Bind Docker credentials securely from Jenkins
                    withCredentials([file(credentialsId: 'docker-config', variable: 'DOCKER_CONFIG_FILE')]) {
                        sh '''
                        mkdir -p /kaniko/.docker
                        cp $DOCKER_CONFIG_FILE /kaniko/.docker/config.json
                        '''
                    }

                    echo "üìù Saving uploaded Dockerfile"
                    sh '''
                    # Ensure the workspace is clean
                    rm -rf kaniko-build && mkdir kaniko-build
                    cp "${DOCKERFILE_UPLOAD}" kaniko-build/Dockerfile
                    '''

                    echo "üèóÔ∏è  Building Docker image using Kaniko..."
                    sh """
                    /kaniko/executor \
                      --dockerfile=kaniko-build/Dockerfile \      # Use uploaded Dockerfile
                      --context=${WORKSPACE}/${CONTEXT_PATH} \    # Build context (workspace)
                      --destination=${IMAGE_NAME} \               # Image to push
                      --cache=true                                # Enable caching for faster builds
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Docker image successfully built and pushed: ${IMAGE_NAME}"
        }
        failure {
            echo "‚ùå Build failed. Check logs for more details."
        }
    }
}

pipeline {
    agent none // Use dynamic Kubernetes pods

    parameters {
        string(name: 'IMAGE_NAME', defaultValue: 'your-registry/your-image:latest', description: 'Docker image to push')
        file(name: 'DOCKERFILE_UPLOAD', description: 'Upload Dockerfile to build the image')
        string(name: 'CONTEXT_PATH', defaultValue: '.', description: 'Docker build context (relative to workspace)')
    }

    environment {
        DOCKER_CONFIG = '/kaniko/.docker/' // Required for Docker credentials
    }

    stages {
        stage('Build and Push Image with Kaniko') {
            agent {
                kubernetes {
                    inheritFrom 'base-pod' // Inherit from your existing pod template
                    containerTemplate {
                        name 'kaniko' // Use Kaniko as a custom container
                        image 'gcr.io/kaniko-project/executor:latest'
                        ttyEnabled true
                        command '/busybox/cat' // Keep container alive for Jenkins
                        volumeMounts: [
                            volumeMount(mountPath: '/kaniko/.docker', name: 'docker-config')
                        ]
                    }
                    volumes {
                        emptyDirVolume(mountPath: '/kaniko/.docker', memory: false) // Mount for credentials
                    }
                }
            }

            steps {
                script {
                    echo "üìÇ Preparing Docker credentials"

                    // Bind Docker credentials securely from Jenkins
                    withCredentials([file(credentialsId: 'docker-config', variable: 'DOCKER_CONFIG_FILE')]) {
                        sh '''
                        mkdir -p /kaniko/.docker
                        cp $DOCKER_CONFIG_FILE /kaniko/.docker/config.json
                        '''
                    }

                    echo "üìù Saving uploaded Dockerfile"
                    sh '''
                    # Prepare build context
                    rm -rf kaniko-build && mkdir kaniko-build
                    cp "${DOCKERFILE_UPLOAD}" kaniko-build/Dockerfile
                    '''

                    echo "üèóÔ∏è  Building Docker image using Kaniko..."
                    container('kaniko') {
                        sh """
                        /kaniko/executor \
                          --dockerfile=kaniko-build/Dockerfile \    # Use uploaded Dockerfile
                          --context=${WORKSPACE}/${CONTEXT_PATH} \  # Build context
                          --destination=${IMAGE_NAME} \             # Target image
                          --cache=true                              # Enable caching for faster builds
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Docker image successfully built and pushed: ${IMAGE_NAME}"
        }
        failure {
            echo "‚ùå Build failed. Check logs for details."
        }
    }
}r


podTemplate(
    label: 'kaniko-builder',
    containers: [
        containerTemplate(
            name: 'kaniko',
            image: 'gcr.io/kaniko-project/executor:latest',
            command: 'cat',
            ttyEnabled: true,
            resourceRequestCpu: '500m',
            resourceRequestMemory: '1Gi',
            volumeMounts: [
                [mountPath: '/kaniko/.docker', name: 'docker-config']
            ]
        )
    ],
    volumes: [
        emptyDirVolume(mountPath: '/kaniko/.docker', name: 'docker-config')
    ]
) {
    node('kaniko-builder') {
        parameters {
            file(name: 'DOCKERFILE', description: 'Upload your Dockerfile')
            string(name: 'REGISTRY', defaultValue: 'docker.io', description: 'Target container registry (e.g., docker.io)')
            string(name: 'IMAGE_NAME', defaultValue: '', description: 'Image name')
            string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Image tag')
        }

        stages {
            stage('Validate Inputs') {
                steps {
                    script {
                        if (!params.DOCKERFILE) {
                            error "Dockerfile is required"
                        }
                        if (!params.IMAGE_NAME) {
                            error "Image name is required"
                        }
                        if (!params.REGISTRY) {
                            error "Registry is required"
                        }
                    }
                }
            }

            stage('Prepare Dockerfile') {
                steps {
                    script {
                        // Rename the uploaded Dockerfile
                        sh "mv ${params.DOCKERFILE} Dockerfile"
                    }
                }
            }

            stage('Build and Push Image') {
                steps {
                    container('kaniko') {
                        withCredentials([usernamePassword(
                            credentialsId: 'docker-registry-creds', // Replace with your actual credential ID
                            usernameVariable: 'REGISTRY_USERNAME',
                            passwordVariable: 'REGISTRY_PASSWORD'
                        )]) {
                            script {
                                // Create Docker config JSON with Jenkins credentials
                                def dockerConfig = """
                                {
                                    "auths": {
                                        "${params.REGISTRY}": {
                                            "username": "${REGISTRY_USERNAME}",
                                            "password": "${REGISTRY_PASSWORD}",
                                            "auth": "${"${REGISTRY_USERNAME}:${REGISTRY_PASSWORD}".bytes.encodeBase64().toString()}"
                                        }
                                    }
                                }
                                """
                                // Write config to Kaniko's expected location
                                writeFile file: '/kaniko/.docker/config.json', text: dockerConfig

                                // Construct the destination
                                def destination = "${params.REGISTRY}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"

                                // Build and push with Kaniko
                                sh """
                                    /kaniko/executor \
                                    --dockerfile=Dockerfile \
                                    --context=. \
                                    --destination=${destination} \
                                    --cache=true \
                                    --cache-ttl=168h
                                """
                            }
                        }
                    }
                }
            }
        }

        post {
            success {
                echo "Image successfully built and pushed to ${params.REGISTRY}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"
            }
            failure {
                echo "Pipeline failed"
            }
            always {
                cleanWs() // Clean workspace after build
            }
        }
    }
}
‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã
